// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package call_trace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CallTraceClient is the client API for CallTrace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallTraceClient interface {
	ShouldBeTraced(ctx context.Context, in *ShouldBeTracedRequest, opts ...grpc.CallOption) (*ShouldBeTracedResponse, error)
	Watch(ctx context.Context, in *ShouldBeTracedRequest, opts ...grpc.CallOption) (CallTrace_WatchClient, error)
	Trace(ctx context.Context, in *CallTraceRequest, opts ...grpc.CallOption) (*Bool, error)
}

type callTraceClient struct {
	cc grpc.ClientConnInterface
}

func NewCallTraceClient(cc grpc.ClientConnInterface) CallTraceClient {
	return &callTraceClient{cc}
}

func (c *callTraceClient) ShouldBeTraced(ctx context.Context, in *ShouldBeTracedRequest, opts ...grpc.CallOption) (*ShouldBeTracedResponse, error) {
	out := new(ShouldBeTracedResponse)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.v3.CallTrace/shouldBeTraced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callTraceClient) Watch(ctx context.Context, in *ShouldBeTracedRequest, opts ...grpc.CallOption) (CallTrace_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &CallTrace_ServiceDesc.Streams[0], "/envoy.extensions.filters.network.sip_proxy.v3.CallTrace/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &callTraceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CallTrace_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type callTraceWatchClient struct {
	grpc.ClientStream
}

func (x *callTraceWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *callTraceClient) Trace(ctx context.Context, in *CallTraceRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/envoy.extensions.filters.network.sip_proxy.v3.CallTrace/trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallTraceServer is the server API for CallTrace service.
// All implementations must embed UnimplementedCallTraceServer
// for forward compatibility
type CallTraceServer interface {
	ShouldBeTraced(context.Context, *ShouldBeTracedRequest) (*ShouldBeTracedResponse, error)
	Watch(*ShouldBeTracedRequest, CallTrace_WatchServer) error
	Trace(context.Context, *CallTraceRequest) (*Bool, error)
	mustEmbedUnimplementedCallTraceServer()
}

// UnimplementedCallTraceServer must be embedded to have forward compatible implementations.
type UnimplementedCallTraceServer struct {
}

func (UnimplementedCallTraceServer) ShouldBeTraced(context.Context, *ShouldBeTracedRequest) (*ShouldBeTracedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldBeTraced not implemented")
}
func (UnimplementedCallTraceServer) Watch(*ShouldBeTracedRequest, CallTrace_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedCallTraceServer) Trace(context.Context, *CallTraceRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedCallTraceServer) mustEmbedUnimplementedCallTraceServer() {}

// UnsafeCallTraceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallTraceServer will
// result in compilation errors.
type UnsafeCallTraceServer interface {
	mustEmbedUnimplementedCallTraceServer()
}

func RegisterCallTraceServer(s grpc.ServiceRegistrar, srv CallTraceServer) {
	s.RegisterService(&CallTrace_ServiceDesc, srv)
}

func _CallTrace_ShouldBeTraced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldBeTracedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallTraceServer).ShouldBeTraced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.v3.CallTrace/shouldBeTraced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallTraceServer).ShouldBeTraced(ctx, req.(*ShouldBeTracedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallTrace_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShouldBeTracedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CallTraceServer).Watch(m, &callTraceWatchServer{stream})
}

type CallTrace_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type callTraceWatchServer struct {
	grpc.ServerStream
}

func (x *callTraceWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CallTrace_Trace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallTraceServer).Trace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.extensions.filters.network.sip_proxy.v3.CallTrace/trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallTraceServer).Trace(ctx, req.(*CallTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CallTrace_ServiceDesc is the grpc.ServiceDesc for CallTrace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallTrace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.extensions.filters.network.sip_proxy.v3.CallTrace",
	HandlerType: (*CallTraceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "shouldBeTraced",
			Handler:    _CallTrace_ShouldBeTraced_Handler,
		},
		{
			MethodName: "trace",
			Handler:    _CallTrace_Trace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _CallTrace_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "call_trace/call_trace.proto",
}
