// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscriber_tracing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriberTracingClient is the client API for SubscriberTracing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriberTracingClient interface {
	TraceId(ctx context.Context, in *TraceIdRequest, opts ...grpc.CallOption) (*TraceIdResponse, error)
	//rpc watch(TraceIdRequest) returns (stream WatchResponse) {}
	SubTrace(ctx context.Context, in *SubscriberTracingRequest, opts ...grpc.CallOption) (*Bool, error)
}

type subscriberTracingClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriberTracingClient(cc grpc.ClientConnInterface) SubscriberTracingClient {
	return &subscriberTracingClient{cc}
}

func (c *subscriberTracingClient) TraceId(ctx context.Context, in *TraceIdRequest, opts ...grpc.CallOption) (*TraceIdResponse, error) {
	out := new(TraceIdResponse)
	err := c.cc.Invoke(ctx, "/subscribertracing.v1.SubscriberTracing/trace_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberTracingClient) SubTrace(ctx context.Context, in *SubscriberTracingRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/subscribertracing.v1.SubscriberTracing/sub_trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberTracingServer is the server API for SubscriberTracing service.
// All implementations must embed UnimplementedSubscriberTracingServer
// for forward compatibility
type SubscriberTracingServer interface {
	TraceId(context.Context, *TraceIdRequest) (*TraceIdResponse, error)
	//rpc watch(TraceIdRequest) returns (stream WatchResponse) {}
	SubTrace(context.Context, *SubscriberTracingRequest) (*Bool, error)
	mustEmbedUnimplementedSubscriberTracingServer()
}

// UnimplementedSubscriberTracingServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriberTracingServer struct {
}

func (UnimplementedSubscriberTracingServer) TraceId(context.Context, *TraceIdRequest) (*TraceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraceId not implemented")
}
func (UnimplementedSubscriberTracingServer) SubTrace(context.Context, *SubscriberTracingRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubTrace not implemented")
}
func (UnimplementedSubscriberTracingServer) mustEmbedUnimplementedSubscriberTracingServer() {}

// UnsafeSubscriberTracingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriberTracingServer will
// result in compilation errors.
type UnsafeSubscriberTracingServer interface {
	mustEmbedUnimplementedSubscriberTracingServer()
}

func RegisterSubscriberTracingServer(s grpc.ServiceRegistrar, srv SubscriberTracingServer) {
	s.RegisterService(&SubscriberTracing_ServiceDesc, srv)
}

func _SubscriberTracing_TraceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberTracingServer).TraceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribertracing.v1.SubscriberTracing/trace_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberTracingServer).TraceId(ctx, req.(*TraceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberTracing_SubTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberTracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberTracingServer).SubTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscribertracing.v1.SubscriberTracing/sub_trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberTracingServer).SubTrace(ctx, req.(*SubscriberTracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriberTracing_ServiceDesc is the grpc.ServiceDesc for SubscriberTracing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriberTracing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscribertracing.v1.SubscriberTracing",
	HandlerType: (*SubscriberTracingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "trace_id",
			Handler:    _SubscriberTracing_TraceId_Handler,
		},
		{
			MethodName: "sub_trace",
			Handler:    _SubscriberTracing_SubTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/subscriber_tracing.proto",
}
